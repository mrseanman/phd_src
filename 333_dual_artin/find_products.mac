conj(x,y):= block(
	all_poss: [u, v, w],
	rem: delete(op(x), delete(op(y), all_poss)),
	new: first(rem),
	indicies: map(lambda([w], first(args(w))), [x, y]),
	if length(rem) = 1 then 
		first(rem)[1-indicies[1] - indicies[2]]
	else
		op(x)[2*indicies[2] - indicies[1]]
	)$

s_1(r):= [r[2], conj(r[1],r[2]), r[3]]$
s_1_inv(r):= [conj(r[2], r[1]), r[1], r[3]]$

s_2(r):= [r[1], r[3], conj(r[2], r[3])]$
s_2_inv(r):= [r[1], conj(r[3], r[2]), r[2]]$

id(r):= r$

/* [] represents identity here */
gens_and_inverses: [[], s_1, s_2, s_1_inv, s_2_inv]$
gen_inv_pairings: [[s_1, s_1_inv], [s_2, s_2_inv]]$

do_fs(fs, x_0):= block(
	fs: reverse(fs),
	new: x_0,
	for f in fs do
		new: f(new),
	new
	)$

c: [u[0], v[0], w[0]]$

do_fs([ s_1, s_2, s_1], c)$
do_fs([ s_2, s_1, s_2], c)$
do_fs([ s_2_inv, s_1_inv, s_2_inv,s_2, s_1, s_2], c)$

/* Function to generate all length n lists (with repeats) with elements from list X */
all_words(X, n) :=
  if n = 0 then [[]] /* Base case: a single empty list when n = 0 */
  else block(
    [rest],
    rest: all_lists(X, n - 1), /* Recursive call to generate lists of length n-1 */
    map(flatten, cartesian_product_list(rest, X))
  )$

reduce_word(word, inv_pairs):= block(
	inv_pair_sets: map(setify, inv_pairs),
	pair_found: true,
	while length(word) > 1 and pair_found do block(
		for i:1 thru length(word) - 1 do block(
			if member({word[i], word[i+1]}, inv_pair_sets) then block(
				word_prefix: firstn(word, i-1),
				word_suffix: lastn(word, length(word) - (i + 1)),
				word: append(word_prefix, word_suffix),
				exit)
			elseif i = length(word) - 1 then pair_found: false
			)
		),
	word
	)$

/* smarter version of all_words that reduces (free group word reduction) words as you go. */
all_reduced_words(X, inv_pairs, n):= 
	if n = 0 then [[]]
	else block(
		[prefixes],
		prefixes: all_reduced_words(X, inv_pairs, n - 1),
		listify(setify(map(lambda([x], reduce_word(x, inv_pairs)), map(flatten, cartesian_product_list(prefixes, X)))))
		)$


make_pairs(words):= makelist([reduce_word(word, gen_inv_pairings), do_fs(word, c)], word, words)$

/* brings together all the different words in the braid group that result in the same factorisation. */
/* There is a list element for each factorisation. */
accumulate(pairs):= block(
	all_b: makelist(second(pair), pair, pairs),
	unique_b: listify(setify(all_b)),
	accumulated_pairs: [],
	for b in unique_b do block(
		associated_as: [],
		for pair in pairs do
			if second(pair) = b then associated_as: append(associated_as, [first(pair)]),
		accumulated_pairs: append(accumulated_pairs, [[setify(associated_as), b]])
		),
	accumulated_pairs
	)$

/* Function to convert a list of lists to (; separated) CSV format */
write_csv(filename, data_list) := block(
    [file_stream, row],
    /* Open the file for writing */
    file_stream : openw(filename),

    /* Iterate over each list (row) in data_list */
    for row in data_list do (
        /* Write the row as comma-separated values */
        printf(file_stream, "~{~a~^;~}~%", row)
    ),

    /* Close the file */
    close(file_stream),
    print("CSV file written to ", filename)
)$

/* see work on 2024/10/17 in ipad. I am trying to enumerate all the factorisations. */
/* the "local action" is the single move from the nearest triangle  */
make_triangle(n):= if mod(n,2)=0 then
		[u[-n/2], v[0], w[n/2]]
	else
		[w[n/2 + 1/2], v[1], u[-n/2 + 1/2]]$

/* code is [n,i] for n integer and i in [0,1,2,3] */
/* n is triangle, i is move away from triangle */
get_factorisation_from_code(code):= block(
	[n, local_action_index]: code,
	local_actions: [id, s_1, s_2, s_2_inv],
	triangle: make_triangle(n),
	local_actions[local_action_index + 1](triangle)
	)$

all_factorisation_codes_up_to_n(n):= 
	cartesian_product_list(makelist(i, i, -n, n), [0, 1, 2, 3]);

all_factorisations_up_to_n(n):= map(get_factorisation_from_code, all_factorisation_codes_up_to_n(n))$

/* check that the above way of enumerating factorisations does indeed result in all the factorisations  */
/* got by just acting by the braid group via the hurwitz action. */
all_reduced_words: all_reduced_words(gens_and_inverses, gen_inv_pairings, 8)$
all_factorisations_due_to_action: setify(map(lambda([x], do_fs(x, c)), all_reduced_words))$

/* if true then enumeration has no overlap (good!) */
is(length(all_factorisations_up_to_n(20)) - length(setify(all_factorisations_up_to_n(20))) = 0);

all_factorisations_due_to_enumeration: setify(all_factorisations_up_to_n(14))$

/* all the action factorisations that are not enumerated (hopefully none) */
setdifference(all_factorisations_due_to_action, all_factorisations_due_to_enumeration);
/* all the enumerated factorisations that are not present as action factorisations (may not be none) */
setdifference(all_factorisations_due_to_enumeration, all_factorisations_due_to_action);

write_csv("./9_words.csv", accumulate(make_pairs(all_reduced_words(gens_and_inverses, gen_inv_pairings, 9))));
